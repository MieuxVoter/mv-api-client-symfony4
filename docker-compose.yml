# The bundle to run an OAS HTML client with a focus on accessibility.
#
# - A PHP (Symfony) server without a database, that connects to the OAS.
# - An nginx instance to handle HTTP traffic
# - A GoAccess utility (one-shot container: generates analytics and exits)
#
# Run with:
#     docker-compose up
# or
#     docker compose up
# depending on your Docker version.
#
# The goaccess container will generate the webpage and then exit.  It is expected.
#

# docker-compose on MV server is a bit behind
# 3.9 does not work there (for now -- to retest, we bumped docker)
version: '3.4'

volumes:
  public_assets:
    name: public_assets
    external: true
  goaccess_report:
    name: goaccess_report

services:
    # We do not need a database, for now,
    # since we are but a client for the OpenAPI.
    # We might need one later, but perhaps a redis will suffice.
    #mysql:
        #image: mysql:8.0
        #restart: on-failure
        #environment:
        #MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        #MYSQL_DATABASE: ${MYSQL_DATABASE}

    php:
        container_name: cli_mieuxvoter_fr_php
        restart: unless-stopped
        build:
            context: .
            dockerfile: docker/php/Dockerfile
        volumes:
            - public_assets:/usr/src/app/public
#        # To experiment
#        env_file:
#            - .env
#            - .env.local
        environment:
            BANANA: teapot
            # Uncomment these two lines to enable the debug goodies
            #APP_ENV: dev
            #APP_DEBUG: 1
            # Don't use this syntax, since docker-compose loads .env and ignores .env.local
            # This has happened to me too many times >.<
            #APP_ENV: ${APP_ENV:-prod}
        #user: ${LOCAL_USER}

    nginx:
        container_name: cli_mieuxvoter_fr_nginx
        restart: unless-stopped
        image: nginx:1.19.0-alpine
        ports:
            - "9001:80"
        volumes:
            # In newer docker-compose, there's a `config` shortcut for this I believe
            - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
            # We could also use a named volume here, no reason except debugging it isn't
            - ./volumes/log_nginx:/var/log/nginx
            # Project static assets built by the cli_mieuxvoter_fr_php container
            - public_assets:/public:ro
            # GoAccess HTML report and debug log
            - goaccess_report:/goaccess:ro
            # Nope ; we need to cook our own .htpasswd from ENV
            # It's OK to copy for now because the sections protected by the htpasswd
            # are not really damaging, since IPs were anonymized.
            - ./docker/nginx/.htpasswd:/nginx/.htpasswd:ro
        depends_on:
            - php

    # One-shot container, for now.
    # Generates HTML report in the volume goaccess_report and exits.
    #   docker-compose up goaccess
    # Or run `bin/goaccess` in a CRON task every hour or so?
    goaccess:
        container_name: cli_mieuxvoter_fr_goaccess
        restart: no
        # latest=1.5.7 ATM
        #image: allinurl/goaccess:latest
        # Instead we use our own Dockerfile, mostly to get `zcat`.
        build:
          context: .
          dockerfile: docker/goaccess/Dockerfile
        volumes:
            - ./volumes/log_nginx:/var/log/nginx:ro
            - ./docker/goaccess:/goaccess:ro
            - goaccess_report:/srv/report
        entrypoint: /bin/sh /goaccess/goaccess_entrypoint.sh
        command:
            - "--no-global-config"
            - "--config-file=/goaccess/goaccess.conf"
            - "--debug-file=/srv/report/debug.log"
            - "--output=/srv/report/index.html"
            - "--anonymize-ip"
            - "--anonymize-level=2"
            # I can't choose whether to ignore crawlers or not.
            # This choice may also be done in the config file. (goaccess.conf)
            # Perhaps we should mod our entrypoint to provide both in separate outputs?
            # Or make a copy of this service?   Whatever.
#            - "--ignore-crawlers"
            # Expensive.   For our use, we only want to generate from time to time.
            # Run this container using CRON, from time to time:   docker compose up goaccess
            # Better yet, use ./bin/goaccess, which is a wrapper for the docker compose command.
#            - "--real-time-html"
            # We do not target log files here this way.
            # We read from stdin and zcat, now, to get logrotated files, see the entrypoint
#            - "--log-file=/var/log/nginx/access.log"
#            - "--log-file=/var/log/nginx/error.log"

